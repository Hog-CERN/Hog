#   Copyright 2018-2020 The University of Birmingham
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

.only-default: &only-default
  rules:
     - if: '$CI_COMMIT_REF_NAME =~ /^test\/.*$/i'
       when: never
     - if: '$CI_MERGE_REQUEST_TITLE =~ /^WIP:.*$/ && $CI_COMMIT_MESSAGE !~ /^RESOLVE_WIP:/'
       when: never
     - if: $CI_MERGE_REQUEST_ID

.tag-hog: &tag-hog
  tags:
     - hog

.tag-sr: &tag-sr
  tags:
     - docker
  image: gitlab-registry.cern.ch/hog/hog-docker:tclsh

.vars: &vars
  GIT_STRATEGY: clone
#   CI_DEBUG_TRACE: "true"

.simulate_project: &simulate_project
     <<: *only-default
     <<: *tag-hog
     stage: generation_and_simulation
     variables:
        <<: *vars
     script:
      - if [[ -v HOG_CHECK_PROJVER ]] && [[ $HOG_CHECK_PROJVER == '1' ]]; then
          vivado -mode batch -notrace -source ./Hog/Tcl/CI/check_proj_ver.tcl -tclargs -ext_path "$HOG_EXTERNAL_PATH" -sim $PROJECT_NAME ;
        else
          echo "Project version checker is disabled.";
        fi
      - if [ -f "./VivadoProjects/$PROJECT_NAME/skip.me" ]; then
          echo "CI disabled for $PROJECT_NAME";
        else
          if [ -z ${HOG_SIMULATION_LIB_PATH+x} ]; then
            echo 'Simulation library path is not defined';
          else
            vivado -mode batch -notrace -source ./Hog/Tcl/launchers/launch_simulation.tcl -tclargs -lib_path $HOG_SIMULATION_LIB_PATH $PROJECT_NAME ;
          fi;
        fi
     artifacts:
       name: simulation_files
       paths:
         - $CI_PROJECT_DIR/VivadoProject/$PROJECT_NAME/$PROJECT_NAME.sim
         - $CI_PROJECT_DIR/SkippedProjects/$PROJECT_NAME
       expire_in: 30 day
     allow_failure: true

.generate_project: &generate_project
    <<: *only-default
    <<: *tag-hog
    stage: generation_and_simulation
    variables:
        <<: *vars
    script:
      - if [[ -v HOG_CHECK_PROJVER ]] && [[ $HOG_CHECK_PROJVER == '1' ]]; then
          vivado -mode batch -notrace -source ./Hog/Tcl/CI/check_proj_ver.tcl -tclargs -ext_path "$HOG_EXTERNAL_PATH" $PROJECT_NAME;        
        else
          echo "Project version checker is disabled.";
        fi
      - if [ -f "./VivadoProjects/$PROJECT_NAME/skip.me" ]; then
          echo "Hog-CI(info) - CI disabled for $PROJECT_NAME";
        else
          if [ -z ${HOG_NJOBS+x} ]; then
            export HOG_NJOBS=4;
            echo "Hog-CI(info) - Number of jobs set to $HOG_NJOBS";
          fi;
          if [ -z ${HOG_IP_EOS_PATH+x} ]; then
            echo "Hog-CI(info) - No EOS path for IPs defined.";
            export IP_EOS_PATH="";
          else
            echo "Hog-CI(info) - IPs will be copied to/from $HOG_IP_EOS_PATH.";
            export IP_EOS_PATH="-ip_eos_path $HOG_IP_EOS_PATH";
            until echo $HOG_PASSWORD | kinit $HOG_USER@CERN.CH ; do echo "Retrying"; sleep 2; done;
          fi;
          if [[ -n "$HOG_NO_BITSTREAM" ]] && [[ $HOG_NO_BITSTREAM == '1' ]]; then
            export NO_BITSTREAM="-no_bitstream";
            echo "Hog-CI(info) - No binary files will be generated.";
          else
            echo "Hog-CI(info) - Binary files will be generated.";
            export NO_BITSTREAM="";
          fi;
          if [[ -n "$HOG_CHECK_SYNTAX" ]] && [[ $HOG_CHECK_SYNTAX == '1' ]]; then
            echo "Hog-CI(info) - HDL syntax will be checked before starting the syntehsis";
            export CHECK_SYNTAX="-check_syntax";
          else
            echo "Hog-CI(info) - HDL syntax will not be checked.";
            export CHECK_SYNTAX="";
          fi;
          if [[ -n "$HOG_ONLY_SYNTH" ]] && [[ $HOG_ONLY_SYNTH == '1' ]]; then
            export ONLY_SYNTH="-synth_only";
            echo "Hog-CI(info) - Only the synthesis will be run.";
          else
            export ONLY_SYNTH="";
          fi;
          if [[ -n "$HOG_NO_RESET_BD" ]] && [[ $HOG_NO_RESET_BD == '1' ]]; then
            echo "Hog-CI(info) - BD files will NOT be reset at pre syntehsis time";
          else
            echo "Hog-CI(info) - BD files will be reset at pre-syntehsis time";
            mkdir -p VivadoProject;
            echo "*.bd" > VivadoProject/hog_reset_files;
          fi;
          echo "Hog-CI(info) - Launching workflow now...";
          echo "./Hog/LaunchWorkflow.sh -njobs $HOG_NJOBS $IP_EOS_PATH $NO_BITSTREAM $ONLY_SYNTH $CHECK_SYNTAX $PROJECT_NAME";
          ./Hog/LaunchWorkflow.sh -njobs $HOG_NJOBS $IP_EOS_PATH $NO_BITSTREAM $ONLY_SYNTH $CHECK_SYNTAX $PROJECT_NAME;
          if [[ -n "$HOG_ONLY_SYNTH" ]] && [[ $HOG_ONLY_SYNTH == '1' ]]; then
            echo "Hog-CI(info) - Adding version and timing summary to note...";
            cat $CI_PROJECT_DIR/VivadoProject/$PROJECT_NAME/$PROJECT_NAME.runs/versions* > note.md;
          else
            echo "Hog-CI(info) - Adding versions and timing summary to note...";
            cat $CI_PROJECT_DIR/bin/$PROJECT_NAME*/versions* $CI_PROJECT_DIR/bin/$PROJECT_NAME*/timing_* > note.md;
          fi;
          echo "Hog-CI(info) - Writing note on gitlab website...";
          ./Hog/Other/WriteGitlabNote.sh $HOG_PUSH_TOKEN $CI_API_V4_URL $CI_PROJECT_ID $CI_MERGE_REQUEST_IID note.md;
          echo "Hog-CI(info) - All done.";
        fi;
    artifacts:
        when: always
        name: implementation_and_bitfiles
        paths:
            - $CI_PROJECT_DIR/VivadoProject/$PROJECT_NAME/$PROJECT_NAME.runs
            - $CI_PROJECT_DIR/bin
        expire_in: 30 day

collect_artifacts:
    <<: *only-default
    <<: *tag-sr
    stage: collect
    variables:
        <<: *vars
    script:
        - mkdir -p $CI_PROJECT_DIR/bin
        - "printf \"## Repository info\n- Merge request number: $CI_MERGE_REQUEST_IID\n- Branch name: $CI_COMMIT_REF_SLUG\n\n\" > $CI_PROJECT_DIR/bin/note.md"
        - ./Hog/Other/Changelog.sh $CI_MERGE_REQUEST_TARGET_BRANCH_NAME >> $CI_PROJECT_DIR/bin/note.md
        - diff_files=$(shopt -s nullglob dotglob; echo $CI_PROJECT_DIR/bin/*/diff*.txt);
        - if [[ $diff_files != "" ]]; then
            echo "## Uncommitted differences" >> $CI_PROJECT_DIR/bin/note.md;
            for f in $diff_files; do
              echo "Found uncommitted differences, check log file $f" >> $CI_PROJECT_DIR/bin/note.md;
              echo "" >> $CI_PROJECT_DIR/bin/note.md;
            done;
          fi
        - note_files="versions timing"
        - for f in $note_files; do
            files=$(shopt -s nullglob dotglob; echo $CI_PROJECT_DIR/bin/*/$f*.txt);
            if (( ${#files} )); then cat $CI_PROJECT_DIR/bin/*/$f*.txt >> $CI_PROJECT_DIR/bin/note.md; fi;
          done
        - git fetch origin refs/notes/*:refs/notes/*
        - git notes add -fm "$CI_MERGE_REQUEST_IID $CI_COMMIT_REF_SLUG"
        - git push origin refs/notes/*
    artifacts:
        when: always
        name: all_projects
        paths:
            - $CI_PROJECT_DIR/bin
        expire_in: 30 day
    allow_failure: true
