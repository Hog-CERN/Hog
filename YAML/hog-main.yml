#   Copyright 2018-2024 The University of Birmingham
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
---
.tag-hog: &tag-hog
  tags:
    - hog

.tag-sr: &tag-sr
  image: gitlab-registry.cern.ch/hog/hog-docker:master

.vars: &vars
  GIT_STRATEGY: clone
#   CI_DEBUG_TRACE: "true"

.only-default: &only-default
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^test\/.*$/i'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /DOXYGEN_ONLY/'
      when: never
    - if: '$CI_MERGE_REQUEST_TITLE =~ /^Draft:.*$/ && $CI_COMMIT_MESSAGE !~ /^RESOLVE_WIP:/'
      when: never
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $HOG_DEVELOP_BRANCH && $HOG_DEVELOP_BRANCH != null'
      when: on_success
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(master|main|release).*$/ && $HOG_TARGET_BRANCH == null && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME != $HOG_DEVELOP_BRANCH'
      when: on_success
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $HOG_TARGET_BRANCH && $HOG_TARGET_BRANCH != null && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME != $HOG_DEVELOP_BRANCH'
      when: on_success
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $HOG_INTERMEDIATE_BRANCH && $HOG_INTERMEDIATE_BRANCH != null'
      when: on_success

.only-default-doxygen: &only-default-doxygen
  rules:
    - if: '$HOG_USE_DOXYGEN != "1"'
      when: never
    - if: '$CI_COMMIT_REF_NAME =~ /^test\/.*$/i'
      when: never
    - if: '$CI_MERGE_REQUEST_TITLE =~ /^Draft:.*$/ && $CI_COMMIT_MESSAGE !~ /^RESOLVE_WIP:/'
      when: never
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $HOG_DEVELOP_BRANCH && $HOG_DEVELOP_BRANCH != null'
      when: on_success
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(master|main|release).*$/ && $HOG_TARGET_BRANCH == null && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME != $HOG_DEVELOP_BRANCH'
      when: on_success
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $HOG_TARGET_BRANCH && $HOG_TARGET_BRANCH != null && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME != $HOG_DEVELOP_BRANCH'
      when: on_success

check_branch_state:
  <<: *only-default
  <<: *tag-sr
  stage: check
  variables:
    GIT_STRATEGY: clone
  script:
    - glab auth login -t $HOG_PUSH_TOKEN -h $CI_SERVER_HOST
    - if [[ $CI_COMMIT_MESSAGE == *RESOLVE_WIP* && $CI_MERGE_REQUEST_TITLE == Draft* ]]; then
        echo 'removing Draft status';
        glab mr update $CI_MERGE_REQUEST_IID --ready;
      fi;
    - if [[ ${HOG_CHECK_YAMLREF} != 1 ]]; then
        echo 'Yaml consistency checker is disabled';
      else
        tclsh ./Hog/Tcl/utils/check_yaml_ref.tcl;
      fi;
    # Check if this is a valid hotfix or feature branch
    - if [ -f "Top/repo.conf" ]; then
        enable_develop_branch=$(awk -F "=" '/ENABLE_DEVELOP_BRANCH/{ gsub(" |\t",""); print $2}' Top/repo.conf);
        hotfix_branch=$(awk -F "=" '/HOTFIX/ {print $2}' Top/repo.conf);
        if [ "$hotfix_branch" == "" ]; then
          hotfix_branch="hotfix/";
        fi;
      fi;
    - if [ "$enable_develop_branch" == "1" ]; then
        pat="^(master|main|release.*)";
        if [[ $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ $pat ]] || [ "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" == "$HOG_TARGET_BRANCH" ] ; then
          if [[ $CI_COMMIT_REF_NAME != ${hotfix_branch}* ]]; then
            echo "[Hog::ERROR] The target of this MR is $CI_MERGE_REQUEST_TARGET_BRANCH_NAME, but the source is not a hotfix branch ($CI_COMMIT_REF_NAME). Please, change the name of source branch or direct the MR to $HOG_DEVELOP_BRANCH.";
            echo "[Hog::INFO] A hotfix branch name should start with ${hotfix_branch}. You can change this setting in your Top/repo.conf file.";
            exit 1;
          fi;
        fi;
      fi;
    - set +e; MERGE_STATUS=$(git merge --no-commit origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}); set -e;
    - if [ "$MERGE_STATUS" == "Already up to date." ]; then
        echo "Branch already up-to-date with respect to $CI_MERGE_REQUEST_TARGET_BRANCH_NAME";
      else
        echo "Branch is outdated with respect to $CI_MERGE_REQUEST_TARGET_BRANCH_NAME";
        printf "Please, merge the latest changes from $CI_MERGE_REQUEST_TARGET_BRANCH_NAME with:\ngit fetch && git merge origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME\n";
        exit 1;
      fi;
    - git fetch origin refs/notes/*:refs/notes/*
    - "NEW_TAG=`echo \"source Hog/Tcl/hog.tcl; puts v[HexVersionToString [GetVer .]]\" | tclsh`"
    - echo "New tag is $NEW_TAG"
    - "git notes add -fm \"$CI_MERGE_REQUEST_IID $CI_COMMIT_REF_NAME $NEW_TAG\""
    - git push origin refs/notes/*
  interruptible: true

make_doxygen:
  <<: *only-default-doxygen
  image: gitlab-registry.cern.ch/hog/hog-docker:doxygen
  stage: generation_and_simulation
  variables:
    <<: *vars
  script:
    - tclsh ./Hog/Tcl/utils/make_doxygen.tcl
  artifacts:
    name: docs
    paths:
      - Doc
    expire_in: 10 years
  dependencies: []
  allow_failure: true
  interruptible: true

tag_official_version:
  <<: *tag-sr
  stage: tag
  rules:
    - if: '$HOG_TARGET_BRANCH != null && $CI_COMMIT_REF_NAME == $HOG_TARGET_BRANCH && $CI_PIPELINE_SOURCE == "push"'
      when: always
    - if: '$HOG_TARGET_BRANCH == null && $CI_COMMIT_REF_NAME =~ /^(master|main|release).*$/  && $CI_PIPELINE_SOURCE == "push"'
      when: always
    - if: '$HOG_DEVELOP_BRANCH != null && $CI_COMMIT_REF_NAME == $HOG_DEVELOP_BRANCH && $CI_PIPELINE_SOURCE == "push"'
      when: always
    - when: never
  script:
    - git fetch origin refs/notes/*:refs/notes/*
    - note=(`git notes show`) || {
        echo "No note found, probably you pushed to a branch that should protected (e.g. master, develop)";
        exit 1;
      }
    - new_tag=${note[2]}
    - if [ -z "$new_tag" ]; then
        echo "It was impossible to get the tag number from the git note of this commit. Check that your repository settigns allows only fast-forward merge, and that the merge_and_tag job in your Merge pipeline succeded.";
        echo "More info here https://hog.readthedocs.io/en/latest/02-User-Manual/02-Hog-CI/01-GitLab-CI/01-setup-CI.html?highlight=fast%20forward#remove-merge-commit";
        exit 1;
      fi
    - present_tag=(`git describe`)
    - if [ $present_tag != $new_tag ]; then
         if [ "$(git tag --list ${new_tag}*)" != "" ]; then
           latest_tag=(`git tag -l ${new_tag}* --sort=-v:refname --merged`);
             if [[ $latest_tag =~ .*-(.*) ]]; then
               nr="${BASH_REMATCH[1]}";
               new_tag="$new_tag-$(($nr+1))";
             else
               new_tag="$new_tag-0";
             fi;
           fi;
         git tag $new_tag -m "Official_version_${new_tag}";
         git push --tags;
      else
        echo "Tagging is not necessary because the present commit is already tagged as $new_tag.";
      fi;

artifacts_and_release:
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /^v.*$/ && $HOG_CREATE_OFFICIAL_RELEASE == "1"
      - $CI_COMMIT_TAG =~ /^v.*$/ && ($HOG_OFFICIAL_BIN_EOS_PATH != null || $HOG_OFFICIAL_BIN_PATH != null)
  <<: *tag-sr
  variables:
    <<: *vars
    GIT_SUBMODULE_STRATEGY: recursive
  stage: release
  script:
    - glab auth login -t $HOG_PUSH_TOKEN -h $CI_SERVER_HOST
    - git fetch origin refs/notes/*:refs/notes/*
    - MR=( `git notes show` )
    - if [[ -v HOG_USE_DOXYGEN ]] && [[ "$HOG_USE_DOXYGEN" == "1" ]]; then
        doxy_var="-doxygen";
      else
        doxy_var="";
      fi;
    - ./Hog/Other/GetArtifactsAndRename.sh -mr $MR $doxy_var
    - mkdir zipped
    - cd bin
    - bit_files=$(find . -name "*.bit" -o -name "*.pof" -o -name "*.bif" -o -name "*.bin")
    - if [ "$bit_files" != "" ]; then
        project_dirs=$(echo $bit_files | xargs dirname | sort | uniq);
      fi;
    - if [ -z ${HOG_MAX_ZIP_SIZE+x} ]; then
        export HOG_MAX_ZIP_SIZE=10m;
        echo "Hog-CI(info) - Maximum size of artifact zip set to $HOG_MAX_ZIP_SIZE";
      fi;
    - for PRJ_DIR in $project_dirs; do
        PRJ_DIR=$(echo "$PRJ_DIR" | sed -r 's#\./##g');
        DEST_ZIP=$(echo "$PRJ_DIR" | sed -r 's#/#_#g');
        echo "Archiving $PRJ_DIR into ../zipped/$DEST_ZIP.zip";
        zip -r -q -s $HOG_MAX_ZIP_SIZE ../zipped/$DEST_ZIP.zip $PRJ_DIR;
      done;
    - cd ..
    - if [[ -v HOG_CREATE_OFFICIAL_RELEASE ]] && [[ $HOG_CREATE_OFFICIAL_RELEASE == "1" ]]; then
        glab release create $CI_COMMIT_TAG -F bin/note.md -n "Official version $CI_COMMIT_TAG";
        if [[ -v HOG_CHECK_PROJVER ]] && [[ $HOG_CHECK_PROJVER == '1' ]]; then
            tclsh ./Hog/Tcl/CI/get_binary_links.tcl $CI_COMMIT_TAG "$HOG_EXTERNAL_PATH";
        else
            tclsh ./Hog/Tcl/CI/get_binary_links.tcl -force $CI_COMMIT_TAG "$HOG_EXTERNAL_PATH";
        fi;
      fi;
  allow_failure: true
  artifacts:
    paths:
      - Doc
      - bin

archive_binary_files:
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /^v.*$/ && $HOG_CREATE_OFFICIAL_RELEASE == "1"
      - $CI_COMMIT_TAG =~ /^v.*$/ && ($HOG_OFFICIAL_BIN_EOS_PATH != null || $HOG_OFFICIAL_BIN_PATH != null)
  <<: *tag-hog
  variables:
    <<: *vars
  needs:
    - job: artifacts_and_release
      artifacts: true
  stage: archive
  script:
    - if [[ -v HOG_OFFICIAL_BIN_PATH ]]; then
        BIN_PATH=$HOG_OFFICIAL_BIN_PATH;
      elif [[ -v HOG_OFFICIAL_BIN_EOS_PATH ]]; then
        BIN_PATH=$HOG_OFFICIAL_BIN_EOS_PATH;
        echo "From version Hog2024.1, HOG_OFFICIAL_BIN_EOS_PATH variable will be deprecated. Please use HOG_OFFICIAL_BIN_PATH to define the path where to copy the official bitfiles.";
      fi;
    - if [[ $BIN_PATH == /eos/* ]]; then
        ENABLE_EOS=1;
        if [ -z ${EOS_PASSWORD+x} ]; then
          if [ -z ${HOG_PASSWORD+x} ]; then
            ENABLE_EOS=0;
            echo "No EOS_PASSWORD has been defined. Artifacts cannot be uploaded to EOS...";
          else
            EOS_PASSWORD=${HOG_PASSWORD};
          fi;
        fi;
        if [ -z ${EOS_USER+x} ]; then
          if [ -z ${HOG_USER+x} ]; then
            ENABLE_EOS=0;
            echo "No EOS_USER has been defined. Artifacts cannot be uploaded to EOS...";
          else
            EOS_USER=${HOG_USER};
          fi;
        fi;
        if [ $ENABLE_EOS -eq 1 ]; then
          until echo $EOS_PASSWORD | kinit $EOS_USER@CERN.CH; do
            echo Retrying;
            sleep 2;
          done;
          echo -n "Variable EOS_MGM_URL is ";
          if [ -z "$EOS_MGM_URL" ]; then
            echo "NOT defined. This variable is essential for EOS to work properly. Hog-CI will use the default value of root://eosuser.cern.ch";
            EOS_MGM_URL="root://eosuser.cern.ch";
          else
            echo "defined.";
          fi;
        fi;
      else
        ENABLE_EOS=0;
      fi;
    - copy_error=0
    - if [[ -v HOG_USE_DOXYGEN ]] && [[ "$HOG_USE_DOXYGEN" == "1" ]] && [[ -v BIN_PATH ]]; then
        if [ -d Doc/html ]; then
          if [ $ENABLE_EOS -eq 1 ]; then
            eos mkdir -p ${BIN_PATH}/Doc;
            xrdcp -rsf Doc/html/* ${EOS_MGM_URL}//${BIN_PATH}/Doc;
          else
            mkdir -p ${BIN_PATH}/Doc;
            cp -r Doc/html/* ${BIN_PATH}/Doc;
          fi;
        else
          echo "[HOG-ERROR] No Doxygen documentation found in Doc/html. Skipping...";
          copy_error=1;
        fi;
      fi;
    - if [[ -v BIN_PATH ]]; then
        if [ -d bin ]; then
          echo "Copying binary files to ${BIN_PATH}/${CI_COMMIT_TAG}";
          if [ $ENABLE_EOS -eq 1 ]; then
            eos mkdir $BIN_PATH/$CI_COMMIT_TAG;
            xrdcp -rfs bin/* ${EOS_MGM_URL}//${BIN_PATH}/${CI_COMMIT_TAG};
          else
            mkdir $BIN_PATH/$CI_COMMIT_TAG;
            cp -r bin/* ${BIN_PATH}/${CI_COMMIT_TAG};
          fi;
        else
          echo "[HOG-ERROR] The binary folder bin was not found...";
          copy_error=1;
        fi;
      fi;
    - if [[ $copy_error -eq 1 ]]; then
        echo "[HOG-ERROR] Some artifacts were not copied. Please check your configuration and try again.";
        exit 1;
      fi;
  allow_failure: true
  artifacts:
    paths:
      - bin
    expire_in: 10 years

create_badge:
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /^v.*$/ && $HOG_BADGE_PROJECTS != null
  <<: *tag-sr
  variables:
    GIT_STRATEGY: clone
    GIT_SUBMODULE_STRATEGY: recursive
  stage: badge
  script:
    - for project in $HOG_BADGE_PROJECTS; do
        tclsh Hog/Tcl/CI/create_badges.tcl $HOG_PUSH_TOKEN $CI_API_V4_URL $CI_PROJECT_ID $CI_PROJECT_URL $project "$HOG_EXTERNAL_PATH";
      done;
  allow_failure: true
  needs:
    - archive_binary_files
