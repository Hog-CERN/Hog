before_script:
    - export REPO=`echo $CI_PROJECT_URL | sed -e s#https://##`
    - git remote set-url origin https://${HOG_USER}:${HOG_PUSH_TOKEN}@$REPO
    - git config user.email ${HOG_EMAIL}
    - git config user.name ${HOG_USER}
    - git fetch 
    - git fetch origin $CI_COMMIT_REF_NAME    
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - git status
    - git checkout $CI_COMMIT_REF_NAME
    - git submodule init
    - git submodule update
    - export XILINXD_LICENSE_FILE=${HOG_XIL_LICENSE}
    - export PATH=${HOG_PATH}:$PATH
    - echo $CI_COMMIT_REF_SLUG
    - echo $HOG_TARGET_BRANCH

.only-default: &only-default
  only:
    refs:
      - merge_requests
  except:
    variables:
      - $CI_COMMIT_REF_NAME =~ /^test\/.*$/i
      - $CI_MERGE_REQUEST_TITLE =~ /^WIP:.*$/
  tags:
     - hog

.vars: &vars
    GIT_STRATEGY: clone
#   CI_DEBUG_TRACE: "true"

stages:
    - merge
    - creation
    - simulation
    - ip
    - synthesis
    - implementation
    - doxygen
    - copy
    - clean

.simulate_project: &simulate_project
     <<: *only-default
     stage: simulation
     variables:
        <<: *vars
     script:
      - "if [ -z ${HOG_SIMULATION_LIB_PATH+x} ]; then echo 'Simulation library path is not defined'; else vivado -mode batch -notrace -source ./Hog/Tcl/launchers/launch_simulation.tcl -tclargs -lib_path $HOG_SIMULATION_LIB_PATH $PROJECT_NAME ; fi"
     artifacts:
       name: vivado_projects
       paths:
         - $CI_PROJECT_DIR/VivadoProject/$PROJECT_NAME/$PROJECT_NAME.sim
       expire_in: 30 day

.create_project: &create_project
     <<: *only-default
     stage: creation
     variables:
        <<: *vars
     script:
      - ./Hog/CreateProject.sh $PROJECT_NAME
      - "if [ -z ${HOG_CHECK_SYNTAX+x} ]; then echo 'Syntax checker is disabled'; else vivado -mode batch -notrace -source ./Hog/Tcl/launchers/launch_check_syntax.tcl -tclargs $PROJECT_NAME; fi"
      - "if [ -z ${HOG_CHECK_YAMLREF+x} ]; then echo 'Yaml consistency checker is disabled'; else vivado -mode batch -notrace -source ./Hog/Tcl/launchers/launch_check_yaml_ref.tcl ; fi" 
     artifacts:
       name: vivado_projects
       paths:
         - $CI_PROJECT_DIR/VivadoProject/$PROJECT_NAME
       expire_in: 30 day

.synthesise_ips: &synthesise_ips
    <<: *only-default
    stage: ip
    variables:
        <<: *vars    
    script:
        - until echo $HOG_PASSWORD | kinit $HOG_USER ; do echo "Retrying"; sleep 2; done
        - "if [ -z ${HOG_IP_EOS_PATH+x} ]; then echo 'No EOS path for IPs defined'; else vivado -mode batch -notrace -source ./Hog/Tcl/launchers/get_ips.tcl -tclargs $PROJECT_NAME; fi"
        - vivado -mode batch -notrace -source ./Hog/Tcl/launchers/launch_ip_synth.tcl -tclargs $PROJECT_NAME
    artifacts:
        name: vivado_runs
        paths:
            - $CI_PROJECT_DIR/VivadoProject/$PROJECT_NAME
            - $CI_PROJECT_DIR/IP
            - $CI_PROJECT_DIR/BD
        expire_in: 30 day

.synthesise_project: &synthesise_project
    <<: *only-default
    stage: synthesis
    variables:
        <<: *vars        
    script:
        - git status
        # - git stash
        - vivado -mode batch -notrace -source ./Hog/Tcl/launchers/launch_synthesis.tcl -tclargs $PROJECT_NAME
    artifacts:
        name: vivado_synth
        paths:
            - $CI_PROJECT_DIR/VivadoProject/$PROJECT_NAME
            - $CI_PROJECT_DIR/bin
        expire_in: 30 day

.implement_project: &implement_project
    <<: *only-default    
    stage: implementation
    variables:
        <<: *vars        
    script:
        - git status
        - git diff
        # - git stash
        - vivado -mode batch -notrace -source ./Hog/Tcl/launchers/launch_implementation.tcl -tclargs $PROJECT_NAME 
        - "if [ -e $CI_PROJECT_DIR/bin/ -a -z '$HOG_UNOFFICIAL_BIN_EOS_PATH' ]; then until echo $HOG_PASSWORD | kinit $HOG_USER ; do echo Retrying; sleep 2; done; 
          eos mkdir -p $HOG_UNOFFICIAL_BIN_EOS_PATH/$CI_COMMIT_SHORT_SHA;
          eos cp -r $CI_PROJECT_DIR/bin/* $HOG_UNOFFICIAL_BIN_EOS_PATH/$CI_COMMIT_SHORT_SHA; fi"

    artifacts:
        name: implementaion_and_bitfiles
        paths:
            - $CI_PROJECT_DIR/VivadoProject/$PROJECT_NAME
            - $CI_PROJECT_DIR/bin           
        expire_in: 10 years

make_doxygen:
    <<: *only-default
    stage: doxygen
    variables:
        <<: *vars
    script:
        - until echo $HOG_PASSWORD | kinit $HOG_USER ; do echo Retrying; sleep 2; done
        - vivado -mode batch -notrace -source ./Hog/Tcl/make_doxygen.tcl
    artifacts:
        name: docs
        paths:
            - $CI_PROJECT_DIR/Doc
        expire_in: 10 years
    allow_failure: true   

merge_and_tag:
     <<: *only-default
     stage: merge
     variables:
       GIT_STRATEGY: clone
     script:
       - ./Hog/CheckEnv.sh
       - "MR_PARAMETERS=`curl --header \"PRIVATE-TOKEN: ${HOG_PUSH_TOKEN}\" ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/merge_requests/${CI_MERGE_REQUEST_IID}`"
       - vivado -mode batch -notrace -source ./Hog/Tcl/launchers/launch_merge_and_tag.tcl -tclargs -mr_par "{$MR_PARAMETERS}" -mr_id $CI_MERGE_REQUEST_IID -push $CI_COMMIT_REF_NAME

tag_official_version:
  only:
    refs:
      - push
      - web
  except:
    variables:
      - $CI_PIPELINE_SOURCE != "push"
      - $CI_COMMIT_REF_SLUG != $HOG_TARGET_BRANCH
  tags:
     - hog
  stage: merge
  script:
     - vivado -mode batch -notrace -source ./Hog/Tcl/launchers/launch_merge_and_tag.tcl -tclargs -merged  -push $CI_COMMIT_REF_NAME

copy_to_eos:
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /^v.*$/ && $HOG_OFFICIAL_BIN_EOS_PATH != null && $HOG_UNOFFICIAL_BIN_EOS_PATH != null 
  tags:
    - hog
  stage: copy
  script:
    - git status
    - until echo $HOG_PASSWORD | kinit $HOG_USER ; do echo Retrying; sleep 2; done
    - vivado -mode batch -notrace -source ./Hog/Tcl/copy_to_eos.tcl -tclargs $HOG_OFFICIAL_BIN_EOS_PATH $HOG_UNOFFICIAL_BIN_EOS_PATH $CI_COMMIT_TAG $CI_COMMIT_SHORT_SHA

cleaning:
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /^v.*$/ && $HOG_OFFICIAL_BIN_EOS_PATH != null && $HOG_UNOFFICIAL_BIN_EOS_PATH != null  
  tags:
     - hog
  stage: clean
  script:
     - git checkout master
     - git pull
     - until echo $HOG_PASSWORD | kinit $HOG_USER ; do echo "Retrying"; sleep 2; done
     - if [ -z ${HOG_UNOFFICIAL_BIN_EOS_PATH+x} ]; then echo "HOG_UNOFFICIAL_BIN_EOS_PATH not specified, nothing to clean..."; else vivado -mode batch -notrace -source Hog/Tcl/clean_unofficial.tcl -tclargs $HOG_UNOFFICIAL_BIN_EOS_PATH; fi
  allow_failure: true
