#   Copyright 2018-2021 The University of Birmingham
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

.tag-hog: &tag-hog
  tags:
     - hog

.tag-sr: &tag-sr
  tags:
     - docker
  image: gitlab-registry.cern.ch/hog/hog-docker:tclsh

.vars: &vars
  GIT_STRATEGY: clone
#   CI_DEBUG_TRACE: "true"

.only-default: &only-default
   rules:
      - if: '$CI_COMMIT_REF_NAME =~ /^test\/.*$/i'
        when: never
      - if: '$CI_COMMIT_MESSAGE =~ /DOXYGEN_ONLY/'
        when: never
      - if: '$CI_MERGE_REQUEST_TITLE =~ /^Draft:.*$/ && $CI_COMMIT_MESSAGE !~ /^RESOLVE_WIP:/'
        when: never
      - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^master.*$/ && $HOG_TARGET_BRANCH == null'
        when: on_success
      - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $HOG_TARGET_BRANCH && $HOG_TARGET_BRANCH != null'
        when: on_success
      - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $HOG_INTERMEDIATE_BRANCH && $HOG_INTERMEDIATE_BRANCH != null'
        when: on_success

.only-default-doxygen: &only-default-doxygen
   rules:
      - if: '$CI_COMMIT_REF_NAME =~ /^test\/.*$/i'
        when: never
      - if: '$CI_MERGE_REQUEST_TITLE =~ /^Draft:.*$/ && $CI_COMMIT_MESSAGE !~ /^RESOLVE_WIP:/'
        when: never
      - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^master.*$/ && $HOG_TARGET_BRANCH == null'
        when: on_success
      - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $HOG_TARGET_BRANCH && $HOG_TARGET_BRANCH != null'
        when: on_success
      - if: '$HOG_USE_DOXYGEN != "1"'
        when: never

merge_and_tag:
  <<: *only-default
  <<: *tag-sr
  stage: merge
  variables:
    GIT_STRATEGY: clone
  script:
    - "if [[ $CI_COMMIT_MESSAGE == *RESOLVE_WIP* && $CI_MERGE_REQUEST_TITLE == Draft* ]]; then echo 'removing Draft status'; curl ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/merge_requests/${CI_MERGE_REQUEST_IID}/notes?body=/wip --header \"PRIVATE-TOKEN: ${HOG_PUSH_TOKEN}\" --request POST; fi;"
    - "MR_PARAMETERS=`curl --header \"PRIVATE-TOKEN: ${HOG_PUSH_TOKEN}\" ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/merge_requests/${CI_MERGE_REQUEST_IID}`"
    - if [[ ((-n $HOG_TARGET_BRANCH) && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "$HOG_TARGET_BRANCH") || ((-z $HOG_TARGET_BRANCH) && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == master*) ]]; then INCREASE=""; else INCREASE="-no_increase"; fi;
    - if [[ ${HOG_CHECK_YAMLREF} != 1 ]]; then
        echo 'Yaml consistency checker is disabled';
      else
          tclsh ./Hog/Tcl/utils/check_yaml_ref.tcl;
      fi;
    - tclsh ./Hog/Tcl/CI/merge_and_tag.tcl -mr_par "$MR_PARAMETERS" -mr_id $CI_MERGE_REQUEST_IID -push $CI_COMMIT_REF_NAME -main_branch $CI_MERGE_REQUEST_TARGET_BRANCH_NAME $INCREASE;
  interruptible: true

make_doxygen:
    <<: *only-default-doxygen
    tags:
     - docker
    image: gitlab-registry.cern.ch/hog/hog-docker:doxygen
    stage: generation_and_simulation
    variables:
        <<: *vars
    script:
        - tclsh ./Hog/Tcl/utils/make_doxygen.tcl
    artifacts:
        name: docs
        paths:
            - $CI_PROJECT_DIR/Doc
        expire_in: 10 years
    dependencies: []
    allow_failure: true
    interruptible: true

tag_official_version:
  <<: *tag-sr
  stage: merge
  script:
     - tclsh ./Hog/Tcl/CI/merge_and_tag.tcl -merged  -push $CI_COMMIT_REF_NAME -main_branch $CI_COMMIT_REF_NAME
  rules:
    - if: '$HOG_TARGET_BRANCH != null && $CI_COMMIT_REF_NAME == $HOG_TARGET_BRANCH && $CI_PIPELINE_SOURCE == "push"'
      when: always
    - if: '$HOG_TARGET_BRANCH == null && $CI_COMMIT_REF_NAME =~ /^master\d*$/  && $CI_PIPELINE_SOURCE == "push"'
      when: always
    - when: never

archive_binary_files:
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /^v.*$/ && $HOG_CREATE_OFFICIAL_RELEASE == "1"
      - $CI_COMMIT_TAG =~ /^v.*$/ && $HOG_OFFICIAL_BIN_EOS_PATH != null
  <<: *tag-sr
  stage: archive
  script:
    - git fetch origin refs/notes/*:refs/notes/*
    - MR=( `git notes show` )
    - ./Hog/Other/GetArtifactsAndRename.sh $HOG_PUSH_TOKEN $CI_API_V4_URL $CI_PROJECT_ID $MR collect_artifacts
    - mkdir zipped
    - cd bin
    - projects=$(find . -name "*.bit" -o -name "*.pof")
    - if [ -z ${HOG_MAX_ZIP_SIZE+x} ]; then
        export HOG_MAX_ZIP_SIZE=10m;
        echo "Hog-CI(info) - Maximum size of artifact zip set to $HOG_MAX_ZIP_SIZE";
      fi;
    - for proj in $projects; do
        PRJ_DIR=$(dirname "$proj");
        PRJ_DIR=$(echo "$PRJ_DIR" | sed -r 's#\./##g');
        DEST_ZIP=$(echo "$PRJ_DIR" | sed -r 's#/#_#g');
        zip -r -s $HOG_MAX_ZIP_SIZE ../zipped/$DEST_ZIP.zip $PRJ_DIR;
      done;
    - cd ..
    - if [[ -v HOG_CREATE_OFFICIAL_RELEASE ]] && [[ $HOG_CREATE_OFFICIAL_RELEASE == "1" ]]; then
        if [[ -v HOG_CHECK_PROJVER ]] && [[ $HOG_CHECK_PROJVER == '1' ]]; then
            tclsh ./Hog/Tcl/CI/get_binary_links.tcl $HOG_PUSH_TOKEN $CI_API_V4_URL $CI_PROJECT_ID $CI_PROJECT_URL $CI_COMMIT_TAG "$HOG_EXTERNAL_PATH";
        else
            tclsh ./Hog/Tcl/CI/get_binary_links.tcl -force $HOG_PUSH_TOKEN $CI_API_V4_URL $CI_PROJECT_ID $CI_PROJECT_URL $CI_COMMIT_TAG "$HOG_EXTERNAL_PATH";
        fi;
        ./Hog/Other/MakeGitlabRelease.sh $HOG_PUSH_TOKEN $CI_API_V4_URL $CI_PROJECT_ID $CI_COMMIT_TAG bin/note.md -load_artifacts;
      fi;
    - if [[ -v HOG_OFFICIAL_BIN_EOS_PATH ]]; then
        until echo $HOG_PASSWORD | kinit $HOG_USER@CERN.CH; do
         echo Retrying;
         sleep 2;
        done;
        eos mkdir $HOG_OFFICIAL_BIN_EOS_PATH/$CI_COMMIT_TAG;
        xrdcp -rf bin/* ${EOS_MGM_URL}//${HOG_OFFICIAL_BIN_EOS_PATH}/${CI_COMMIT_TAG};
      fi;
    - if [[ -v HOG_USE_DOXYGEN ]] && [[ $HOG_USE_DOXYGEN == '1' ]]; then
        cd bin;
        ../Hog/Other/GetArtifactsAndRename.sh $HOG_PUSH_TOKEN $CI_API_V4_URL $CI_PROJECT_ID $MR make_doxygen;
        if [ $HOG_OFFICIAL_BIN_EOS_PATH != null ]; then
          eos mkdir -p ${HOG_OFFICIAL_BIN_EOS_PATH}/Doc;
          xrdcp -rf Doc/html/* ${EOS_MGM_URL}//${HOG_OFFICIAL_BIN_EOS_PATH}/Doc;
        fi;
        cd ..;
      fi
  allow_failure: true
  artifacts:
    paths:
      - bin
    expire_in: 10 years
