#!/bin/sh
if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

list=`git diff --pretty="" --name-only --cached --diff-filter=MA`

warning_done="no"
for f in $list; do
    ext="${f##*.}"
    name="${f%.*}"
    if [ "$ext" = "xci" ]
    then
	if [ "$warning_done" = "no" ]
	then
	    warning_done="yes"
	    echo
	    echo "[Hog hook] ATTENTION: you are about to commit Xilinx IP files, do not do so unless you mean to."
	    echo
	fi
	echo "[Hog hook] Found xci in commit: $f, adding xml $name.xml as well..."
	if [ -e  $name.xml ]
	then
	    git update-index --no-assume-unchanged $name.xml
	    git add $name.xml
	    git update-index --assume-unchanged $name.xml
	else
	    echo
	    echo "[Hog hook] WARNING $name.xml not found!"
	    echo
	fi     
    fi
done

list_deleted=`git diff --pretty="" --name-only --cached --diff-filter=D`
warning_done="no"
for f in $list_deleted; do
    ext="${f##*.}"
    name="${f%.*}"
    if [ "$ext" = "xci" ]
    then
	if [ "$warning_done" = "no" ]
	then
	    warning_done="yes"
	    echo
	    echo "[Hog hook] ATTENTION: you are about to remove Xilinx IP files, do not do so unless you mean to."
	    echo
	fi
	echo "[Hog hook] Found deleted xci in commit: $f, deleting xml $name.xml as well..."
	if [ -e  $name.xml ]
	then
	    git update-index --no-assume-unchanged $name.xml
	    git rm $name.xml
	else
	    echo
	    echo "[Hog hook] WARNING $name.xml not found!"
	    echo
	fi     
    fi
done

list_renamed_from=`git diff --pretty="" --cached --diff-filter=R | grep "rename from" | awk '{print $3}'`
list_renamed_to=`git diff --pretty="" --cached --diff-filter=R | grep "rename to" | awk '{print $3}'`
warning_done="no"
for i in ${!list_renamed_from[*]}; do
    f=${list_renamed_to[$i]}
    g=${list_renamed_from[$i]}    
    ext="${f##*.}"
    name="${f%.*}"
    from_ext="${g##*.}"
    from_name="${g%.*}"

    if [ "$from_ext" = "xci" ]
    then
	if [ "$ext" = "xci" ]
	then
	    if [ "$warning_done" = "no" ]
	    then
		warning_done="yes"
		echo
		echo "[Hog hook] ATTENTION: you are about to rename a Xilinx IP files, do not do so unless you mean to."
		echo
	    fi
	    echo "[Hog hook] Found renamed xci in commit: from $g to $f, renaming $from_name.xml to $name.xml as well..."
	    if [ -e  $from_name.xml ]
	    then
		git update-index --no-assume-unchanged $from_name.xml
		mv $from_name.xml $name.xml
		git rm $from_name.xml
		git add $name.xml	    
		git update-index --assume-unchanged $name.xml	    
	    else
		echo
		echo "[Hog hook] WARNING $from_name.xml not found!"
		echo
	    fi
	else
	    echo
	    echo "[Hog hook] WARNING Renaming xci file $g into another file type $f, will stop assuming $from_name.xml unchanged..."
	    echo
	    git update-index --no-assume-unchanged $from_name.xml	    
	fi
    fi
done


# If there are whitespace errors, print the offending file names and fail.
#exec git diff-index --check --cached $against --


