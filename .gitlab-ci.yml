#   Copyright 2018-2020 The University of Birmingham
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


default:
      before_script:
          - export REPO=`echo $CI_PROJECT_URL | sed -e s#https://##`
          - git remote set-url origin https://hog:${HOG_PUSH_TOKEN}@$REPO
          - git config --global user.email "hog@cern.ch"
          - git config --global user.name "Hog"
          - git fetch
          - git fetch origin $CI_COMMIT_REF_NAME
          - git checkout $CI_COMMIT_REF_NAME --

stages:
      - tag
      - build_doc

build-doxygen-test:
      stage: build_doc
      image: gitlab-registry.cern.ch/hog/hog-docker
      before_script:
        - echo ""
      script:
        - chmod +x ./doxygen/scripts/build-and-deploy.sh
        - ./doxygen/scripts/build-and-deploy.sh /eos/user/h/hog/www/test-doxy

build-doxygen-official:
      stage: build_doc
      image: gitlab-registry.cern.ch/hog/hog-docker
      only:
        - master
      before_script:
        - echo ""
      script:
        - chmod +x ./doxygen/scripts/build-and-deploy.sh
        - ./doxygen/scripts/build-and-deploy.sh /eos/project/a/atlas-hog/www/hog-user-docs/hog-doxygen-docs

changelog:
      stage: tag
      image: tcl2020/tcl2020:latest
      only:
           refs:
              - merge_requests
           variables:
              - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(master|develop)$/
      except:
           variables:
              - $CI_COMMIT_REF_NAME =~ /^test\/.*$/i
      script:
          - "MR_PARAMETERS=`curl --header \"PRIVATE-TOKEN: ${HOG_PUSH_TOKEN}\" ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/merge_requests/${CI_MERGE_REQUEST_IID}`"
          - tclsh ./Tcl/CI/merge_and_tag.tcl -Hog  -mr_par "$MR_PARAMETERS" -mr_id $CI_MERGE_REQUEST_IID -push $CI_COMMIT_REF_NAME -main_branch $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
          - git fetch origin refs/notes/*:refs/notes/*
          - git notes add -fm "$CI_MERGE_REQUEST_IID $CI_COMMIT_REF_SLUG"
          - git push origin refs/notes/*
          - "printf \"## Repository info\n- Merge request number: $CI_MERGE_REQUEST_IID\n- Branch name: $CI_COMMIT_REF_SLUG\n\n\" > changelog.md"
          - ./Other/Changelog.sh $CI_MERGE_REQUEST_TARGET_BRANCH_NAME >> changelog.md
      artifacts:
        name: changelog
        paths:
          - changelog.md
        expire_in: 1 month

tagging_develop:
      stage: tag
      image: tcl2020/tcl2020:latest
      only:
          - push
          - web
      except:
          variables:
              - $CI_PIPELINE_SOURCE != "push"
              - $CI_COMMIT_REF_SLUG != "develop"
      script:
          - tclsh ./Tcl/CI/merge_and_tag.tcl -Hog -merged -push $CI_COMMIT_REF_NAME -main_branch develop -default_level 1 0

tagging_master_hotfix:
      stage: tag
      image: tcl2020/tcl2020:latest
      only:
          - push
          - web
      except:
          variables:
              - $CI_PIPELINE_SOURCE != "push"
              - $CI_COMMIT_REF_SLUG != "master"
      script:
          - git fetch origin refs/notes/*:refs/notes/*
          - MR_INFO=( `git notes show` )
          - BRANCH=${MR_INFO[1]}
          - if [[ ${BRANCH} != "develop" ]]; then tclsh ./Tcl/CI/merge_and_tag.tcl -Hog -merged -push $CI_COMMIT_REF_NAME -default_level 0 0; else echo "Skipping because it is not a hotfix"; fi;

create_release_note:
        stage: tag
        image: tcl2020/tcl2020:latest
        only:
          refs:
            - tags
          variables:
            - $CI_COMMIT_TAG =~ /^(v.*)|(Hog.*)$/
        script:
          - git fetch origin refs/notes/*:refs/notes/*
          - MR=( `git notes show` )
          - ./Other/GetGitlabArtifact.sh $HOG_PUSH_TOKEN $CI_API_V4_URL $CI_PROJECT_ID $MR changelog.md changelog > note.md
          - "if [[ $CI_COMMIT_TAG =~ ^v.*$ ]]; then ./Other/MakeGitlabRelease.sh $HOG_PUSH_TOKEN $CI_API_V4_URL $CI_PROJECT_ID $CI_COMMIT_TAG note.md -b;
            ./Other/UpdateDocReleases.sh note.md $CI_COMMIT_TAG -b ; fi"
          - "if [[ $CI_COMMIT_TAG =~ ^Hog.*$ ]]; then ./Other/MakeGitlabRelease.sh $HOG_PUSH_TOKEN $CI_API_V4_URL $CI_PROJECT_ID $CI_COMMIT_TAG note.md;
            ./Other/UpdateDocReleases.sh note.md $CI_COMMIT_TAG; fi"
