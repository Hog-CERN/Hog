#   Copyright 2018-2020 The University of Birmingham
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


before_script:
    - export REPO=`echo $CI_PROJECT_URL | sed -e s#https://##`
    - git remote set-url origin https://${HOG_USER}:${HOG_PUSH_TOKEN}@$REPO
    - git config user.email ${HOG_EMAIL}
    - git config user.name ${HOG_USER}
    - git fetch
    - git fetch origin $CI_COMMIT_REF_NAME
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - git status
    - git checkout $CI_COMMIT_REF_NAME --
    - git submodule init
    - git submodule update
    - export XILINXD_LICENSE_FILE=${HOG_XIL_LICENSE}
    - export PATH=${HOG_PATH}:$PATH
    - export LD_LIBRARY_PATH=${HOG_LD_LIBRARY_PATH}:$LD_LIBRARY_PATH

.only-default: &only-default
  rules:
     - if: '$CI_COMMIT_REF_NAME =~ /^test\/.*$/i'
     - if: '$CI_MERGE_REQUEST_TITLE =~ /^WIP:.*$/ && $CI_COMMIT_MESSAGE !~ /^RESOLVE_WIP:/'
     - if: $CI_MERGE_REQUEST_ID
  tags:
     - hog

.vars: &vars
    GIT_STRATEGY: clone
#   CI_DEBUG_TRACE: "true"

stages:
  - merge
  - creation
  - ip
  - synthesis_and_simulation
  - implementation
  - collect

.create_project: &create_project
     <<: *only-default
     stage: creation
     variables:
        <<: *vars
     script:
      - if [[ ${HOG_CHECK_PROJVER} != 1 ]]; then 
          echo "Project version checker is disabled.";
        else 
          vivado -mode batch -notrace -source ./Hog/Tcl/CI/check_proj_ver.tcl -tclargs $PROJECT_NAME; 
        fi
      - if [ -f "./VivadoProjects/$PROJECT_NAME/skip.me" ]; then
          echo "CI disabled for $PROJECT_NAME";
        else 
          ./Hog/CreateProject.sh $PROJECT_NAME;
          if [[ ${HOG_CHECK_SYNTAX} != 1 ]]; then 
            echo 'Syntax checker is disabled'; 
          else 
            vivado -mode batch -notrace -source ./Hog/Tcl/utils/check_syntax.tcl -tclargs $PROJECT_NAME; 
          fi;
        fi
     artifacts:
       name: vivado_projects
       paths:
         - $CI_PROJECT_DIR/VivadoProject/$PROJECT_NAME
       expire_in: 30 day


.simulate_project: &simulate_project
     <<: *only-default
     stage: synthesis_and_simulation
     variables:
        <<: *vars
     script:
      - if [ -f "./VivadoProjects/$PROJECT_NAME/skip.me" ]; then
          echo "CI disabled for $PROJECT_NAME"; 
        else
          if [ -z ${HOG_SIMULATION_LIB_PATH+x} ]; then 
            echo 'Simulation library path is not defined'; 
          else 
            vivado -mode batch -notrace -source ./Hog/Tcl/launchers/launch_simulation.tcl -tclargs -lib_path $HOG_SIMULATION_LIB_PATH $PROJECT_NAME ;
          fi;
        fi
     artifacts:
       name: simulation_files
       paths:
         - $CI_PROJECT_DIR/VivadoProject/$PROJECT_NAME/$PROJECT_NAME.sim
         - $CI_PROJECT_DIR/SkippedProjects/$PROJECT_NAME
       expire_in: 30 day
     allow_failure: true

.synthesise_ips: &synthesise_ips
    <<: *only-default
    stage: ip
    variables:
        <<: *vars
    script:
      - if [ -f "./VivadoProjects/$PROJECT_NAME/skip.me" ]; then
          echo "CI disabled for $PROJECT_NAME"; 
        else
          until echo $HOG_PASSWORD | kinit $HOG_USER ; do echo "Retrying"; sleep 2; done;
          if [ -z ${HOG_IP_NJOBS+x} ]; then export HOG_IP_NJOBS=4; fi;
          if [ -z ${HOG_IP_EOS_PATH+x} ]; then
            echo 'No EOS path for IPs defined';
            vivado -mode batch -notrace -source ./Hog/Tcl/launchers/launch_ip_synth.tcl -tclargs -NJOBS $HOG_IP_NJOBS $PROJECT_NAME ;
          else 
            vivado -mode batch -notrace -source ./Hog/Tcl/utils/get_ips.tcl -tclargs -eos_ip_path \"$HOG_IP_EOS_PATH\" $PROJECT_NAME;
            vivado -mode batch -notrace -source ./Hog/Tcl/launchers/launch_ip_synth.tcl -tclargs -NJOBS $HOG_IP_NJOBS -eos_ip_path \"$HOG_IP_EOS_PATH\" $PROJECT_NAME ;
          fi;
            rm BD/*.bd ||:;
        fi
    artifacts:
        name: vivado_runs
        paths:
            - $CI_PROJECT_DIR/VivadoProject/$PROJECT_NAME
            - $CI_PROJECT_DIR/IP
            - $CI_PROJECT_DIR/BD
        expire_in: 30 day

.synthesise_project: &synthesise_project
    <<: *only-default
    stage: synthesis_and_simulation
    variables:
        <<: *vars
    script:
      - if [ -f "./VivadoProjects/$PROJECT_NAME/skip.me" ]; then
          echo "CI disabled for $PROJECT_NAME"; 
        else
          if [ -z ${HOG_NJOBS+x} ]; then export HOG_NJOBS=4; fi;
          vivado -mode batch -notrace -source ./Hog/Tcl/launchers/launch_synthesis.tcl -tclargs -NJOBS $HOG_NJOBS $PROJECT_NAME;
        fi
    artifacts:
        name: vivado_synth
        paths:
            - $CI_PROJECT_DIR/VivadoProject/$PROJECT_NAME
            - $CI_PROJECT_DIR/bin
            - $CI_PROJECT_DIR/IP
            - $CI_PROJECT_DIR/BD
        expire_in: 30 day

.implement_project: &implement_project
    <<: *only-default
    stage: implementation
    variables:
        <<: *vars
    script:
        - git status
        - git diff
        - if [ -z ${HOG_NJOBS+x} ]; then export HOG_NJOBS=4; fi
        - if [ -z ${HOG_NO_BITSTREAM+x} ]; then export HOG_NO_BITSTREAM=0; fi
        - "if [ $HOG_NO_BITSTREAM == '1' ]; then
           vivado -mode batch -notrace -source ./Hog/Tcl/launchers/launch_implementation.tcl -tclargs -no_bitstream -NJOBS $HOG_NJOBS  $PROJECT_NAME;
           else vivado -mode batch -notrace -source ./Hog/Tcl/launchers/launch_implementation.tcl -tclargs -NJOBS $HOG_NJOBS $PROJECT_NAME;
           fi"
        - "cat $CI_PROJECT_DIR/bin/$PROJECT_NAME*/versions* $CI_PROJECT_DIR/bin/$PROJECT_NAME*/timing_* > note.md"
        - ./Hog/Other/WriteGitlabNote.sh $HOG_PUSH_TOKEN $CI_API_V4_URL $CI_PROJECT_ID $CI_MERGE_REQUEST_IID note.md
    artifacts:
        name: implementation_and_bitfiles
        paths:
            - $CI_PROJECT_DIR/VivadoProject/$PROJECT_NAME
            - $CI_PROJECT_DIR/bin
        expire_in: 1 month

collect_artifacts:
    <<: *only-default
    stage: collect
    variables:
        <<: *vars
    script:
        - "printf \"## Repository info\n- Merge request number: $CI_MERGE_REQUEST_IID\n- Branch name: $CI_COMMIT_REF_SLUG\n\n\" > $CI_PROJECT_DIR/bin/note.md"
        - ./Hog/Other/Changelog.sh $CI_MERGE_REQUEST_TARGET_BRANCH_NAME >> $CI_PROJECT_DIR/bin/note.md
        - diff_files=$(shopt -s nullglob dotglob; echo $CI_PROJECT_DIR/bin/*/diff*.txt);
        - if [[ $diff_files != "" ]]; then 
            echo "## Uncommitted differences" >> $CI_PROJECT_DIR/bin/note.md;
            for f in $diff_files; do
              echo "Found uncommitted differences, check log file $f" >> $CI_PROJECT_DIR/bin/note.md;
              echo "" >> $CI_PROJECT_DIR/bin/note.md;
            done;
          fi
        - note_files="versions timing"
        - for f in $note_files; do
            files=$(shopt -s nullglob dotglob; echo $CI_PROJECT_DIR/bin/*/$f*.txt);
            if (( ${#files} )); then cat $CI_PROJECT_DIR/bin/*/$f*.txt >> $CI_PROJECT_DIR/bin/note.md; fi;
          done
        - git fetch origin refs/notes/*:refs/notes/*
        - git notes add -fm "$CI_MERGE_REQUEST_IID $CI_COMMIT_REF_SLUG"
        - git push origin refs/notes/*
        - "if [ -e $CI_PROJECT_DIR/bin/ -a -n '$HOG_UNOFFICIAL_BIN_EOS_PATH' ]; then until echo $HOG_PASSWORD | kinit $HOG_USER ; do echo Retrying; sleep 2; done;
          eos mkdir -p $HOG_UNOFFICIAL_BIN_EOS_PATH/$CI_COMMIT_SHORT_SHA;
          eos cp -r $CI_PROJECT_DIR/bin/* $HOG_UNOFFICIAL_BIN_EOS_PATH/$CI_COMMIT_SHORT_SHA; fi"
    artifacts: 
        when: always
        name: all_projects
        paths:
            - $CI_PROJECT_DIR/bin
        expire_in: 10 years
    allow_failure: true
