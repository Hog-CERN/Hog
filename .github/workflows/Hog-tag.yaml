name: Hog-tag

on:
  workflow_call:
    inputs:
      HOG_CREATE_OFFICIAL_RELEASE:
        required: false
      HOG_OFFICIAL_BIN_EOS_PATH:
        required: false
      HOG_USE_DOXYGEN:
        required: false
      HOG_CHECK_PROJVER:
        required: false
    secrets:
      SUBMODULE_CONTENT_PULL_KEY:
        required: true
      HOG_PUSH_TOKEN:
        required: true
      HOG_EMAIL:
        required: true
      HOG_USER:
        required: true
      EOS_PASSWORD:
        required: false
      EOS_USER:
        required: false

env:
  HOG_PUSH_TOKEN: ${{ secrets.HOG_PUSH_TOKEN }}
  GITHUB_API_URL: ${{ github.api_url }}
  REPO: ${{ github.repository }}
  HOG_USER: ${{ secrets.HOG_USER }}
  HOG_EMAIL: ${{ secrets.HOG_EMAIL }}
  SOURCE_BRANCH: ${{ github.head_ref }}

jobs:
  archive_binary_files:
    runs-on: ubuntu-latest
    if: ${{ inputs.HOG_OFFICIAL_BIN_EOS_PATH != "" }}
    container: gitlab-registry.cern.ch/hog/hog-docker:tclsh
    steps:
      - uses: actions/checkout@v2
        with: 
          fetch-depth: 0
      - uses: webfactory/ssh-agent@v0.5.4
        with:
            ssh-private-key: ${{ secrets.SUBMODULE_CONTENT_PULL_KEY }}
      - name: Get Artifacts
        run: |
          git config --global user.email "$HOG_EMAIL"
          git config --global user.name "$HOG_USER"
          git fetch 
          git checkout $SOURCE_BRANCH
          git pull
          git submodule init
          git submodule update
          if [[ -v "${{ inputs.HOG_OFFICIAL_BIN_EOS_PATH }}" ]]; then
            until echo $EOS_PASSWORD | kinit $EOS_USER@CERN.CH; do
            echo Retrying;
            sleep 2;
            done;
          fi;
          git fetch origin refs/notes/*:refs/notes/*
          RUNID=( `git notes show` )
          if [[ "${{ inputs.HOG_USE_DOXYGEN }}" == "1" ]]; then
            ./Hog/Other/GetArtifactsAndRename.sh -token $HOG_PUSH_TOKEN -url $GITHUB_API_URL -proj_id $REPO -mr $RUNID -doxygen -github ;
            if [[ -v "${{ inputs.HOG_OFFICIAL_BIN_EOS_PATH }}" ]]; then
              echo "Copying Doxygen documentation to ${HOG_OFFICIAL_BIN_EOS_PATH}/Doc";
              eos mkdir -p ${{ inputs.HOG_OFFICIAL_BIN_EOS_PATH }}/Doc;
              xrdcp -rsf Doc/html/* ${EOS_MGM_URL}//${HOG_OFFICIAL_BIN_EOS_PATH}/Doc;
            fi;
          else
            ./Hog/Other/GetArtifactsAndRename.sh -token $HOG_PUSH_TOKEN -url $GITHUB_API_URL -proj_id $REPO -mr $RUNID -github;
          fi
          if [[ -v "${{ inputs.HOG_OFFICIAL_BIN_EOS_PATH } ]]; then
            echo "Copying binary files to ${{inputs.HOG_OFFICIAL_BIN_EOS_PATH}}/${{ github.ref }}";
            eos mkdir $HOG_OFFICIAL_BIN_EOS_PATH/${{ github.ref }};
            xrdcp -rfs bin/* ${EOS_MGM_URL}//${HOG_OFFICIAL_BIN_EOS_PATH}/${{ github.ref }};
          fi;
  create_github_release:
    runs-on: ubuntu-latest
    container: gitlab-registry.cern.ch/hog/hog-docker:tclsh
    if: ${{ inputs.HOG_CREATE_OFFICIAL_RELEASE == '1' }}
    steps:
      - uses: actions/checkout@v2
        with: 
          fetch-depth: 0
      - uses: webfactory/ssh-agent@v0.5.4
        with:
            ssh-private-key: ${{ secrets.SUBMODULE_CONTENT_PULL_KEY }}
      - name: Get Artifacts
        run: |
          git config --global user.email "$HOG_EMAIL"
          git config --global user.name "$HOG_USER"
          git fetch 
          git checkout $SOURCE_BRANCH
          git pull
          git submodule init
          git submodule update
          git fetch origin refs/notes/*:refs/notes/*
          RUNID=( `git notes show` )
          ./Hog/Other/GetArtifactsAndRename.sh -token $HOG_PUSH_TOKEN -url $GITHUB_API_URL -proj_id $REPO -mr $RUNID -github;         
          zip -r binaries.zip bin
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: bin/note.md
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./binaries.zip
          asset_name: Binaries
          asset_content_type: application/zip


