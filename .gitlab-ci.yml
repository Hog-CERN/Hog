#   Copyright 2018-2023 The University of Birmingham
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

---
default:
  before_script:
    - export REPO=`echo $CI_PROJECT_URL | sed -e s#https://##`
    - git remote set-url origin https://hog_user:${HOG_PUSH_TOKEN}@$REPO
    - git config --global user.email "hog@cern.ch"
    - git config --global user.name "hog_user"
    - git fetch
    - git fetch origin $CI_COMMIT_REF_NAME
    - git checkout $CI_COMMIT_REF_NAME --
    - git status
    - source ./Other/CommonFunctions.sh
    - print_hog .
stages: [tag, build_doc]

build-doxygen-test:
  stage: build_doc
  image: gitlab-registry.cern.ch/hog/hog-docker:ubuntu
  only:
    refs: [merge_requests]
    variables: [$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(master|develop)$/]
  except:
    variables: [$CI_COMMIT_REF_NAME =~ /^test\/.*$/i]
  before_script: [echo ""]
  script:
    - git clone https://hog:${CERN_PUSH_TOKEN}@gitlab.cern.ch/hog/hog-doxygen.git
      doxygen
    - which kinit
    - chmod +x ./doxygen/scripts/build-and-deploy.sh
    - ./doxygen/scripts/build-and-deploy.sh /eos/user/h/hog/www/doxy-test
  artifacts:
    name: doxygen
    paths:
      - DOXY_DOCS/

build-doxygen-develop:
  stage: build_doc
  image: gitlab-registry.cern.ch/hog/hog-docker:ubuntu
  only:
    refs: [tags]
    variables: [$CI_COMMIT_TAG =~ /^(v.*)$/]
  before_script: [echo ""]
  script:
    - git clone https://hog:${CERN_PUSH_TOKEN}@gitlab.cern.ch/hog/hog-doxygen.git
      doxygen
    - chmod +x ./doxygen/scripts/build-and-deploy.sh
    - ./doxygen/scripts/build-and-deploy.sh /eos/user/h/hog/www/doxy-develop

build-doxygen-official:
  stage: build_doc
  image: gitlab-registry.cern.ch/hog/hog-docker:ubuntu
  only:
    refs: [tags]
    variables: [$CI_COMMIT_TAG =~ /^(Hog.*)$/]
  before_script: [echo ""]
  script:
    - git clone https://hog:${CERN_PUSH_TOKEN}@gitlab.cern.ch/hog/hog-doxygen.git
      doxygen
    - chmod +x ./doxygen/scripts/build-and-deploy.sh
    - ./doxygen/scripts/build-and-deploy.sh /eos/user/h/hog/www/doxy-master

changelog:
  stage: tag
  image: gitlab-registry.cern.ch/hog/hog-docker:tclsh
  only:
    refs: [merge_requests]
    variables: [$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(master|develop)$/]
  except:
    variables: [$CI_COMMIT_REF_NAME =~ /^test\/.*$/i]
  script:
    - git fetch origin refs/notes/*:refs/notes/*
    - git notes add -fm "$CI_MERGE_REQUEST_IID $CI_COMMIT_REF_NAME"
    - git push origin refs/notes/*
    - "printf \"## Repository info\n- Merge request number: $CI_MERGE_REQUEST_IID\n\
      - Branch name: $CI_COMMIT_REF_NAME\n\n\" > changelog.md"
    - ./Other/Changelog.sh -t $CI_MERGE_REQUEST_TARGET_BRANCH_NAME -pt $HOG_PUSH_TOKEN
      -a $CI_API_V4_URL -p $CI_PROJECT_ID -n $CI_MERGE_REQUEST_IID  >> changelog.md
  artifacts:
    name: changelog
    paths: [changelog.md]
    expire_in: 1 month

tagging_develop:
  stage: tag
  image: gitlab-registry.cern.ch/hog/hog-docker:tclsh
  only: [push, web]
  except:
    variables:
      - $CI_PIPELINE_SOURCE != "push"
      - $CI_COMMIT_REF_NAME != "develop"
  script:
    - git fetch origin refs/notes/*:refs/notes/*
    - note=(`git notes show`) || { echo "No note found, probably you pushed to a branch
      that should protected (e.g. master, develop)"; exit 1; }
    - new_tag=`echo "source Tcl/hog.tcl; puts v[HexVersionToString [GetVer . 1]]" | tclsh`
    - echo "New tag is $new_tag"
    - git tag $new_tag -m "Official_version_${new_tag}";
    - git push --tags;

tagging_master_hotfix:
  stage: tag
  image: gitlab-registry.cern.ch/hog/hog-docker:tclsh
  only: [push, web]
  except:
    variables:
      - $CI_PIPELINE_SOURCE != "push"
      - $CI_COMMIT_REF_NAME != "master"
  script:
    - git fetch origin refs/notes/*:refs/notes/*
    - MR_INFO=( `git notes show` )
    - BRANCH=${MR_INFO[1]}
    - if [[ ${BRANCH} != "develop" ]]; then
        new_tag=`echo "source Tcl/hog.tcl; puts v[HexVersionToString [GetVer . 0]]" | tclsh`;
        echo "New tag is $new_tag";
        git tag $new_tag -m "Official_version_${new_tag}";
        git push --tags;
      else
        echo "Skipping because it is not a hotfix";
      fi;


shellcheck:
  stage: tag
  image: gitlab-registry.cern.ch/hog/hog-docker:ubuntu
  only:
    refs: [merge_requests]
    variables: [$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(master|develop)$/]
  except:
    variables: [$CI_COMMIT_REF_NAME =~ /^test\/.*$/i]
  script:
    - shellcheck -x -S error Other/*.sh *.sh

yamllint:
  stage: tag
  image: gitlab-registry.cern.ch/hog/hog-docker:ubuntu
  only:
    refs: [merge_requests]
    variables: [$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(master|develop)$/]
  except:
    variables: [$CI_COMMIT_REF_NAME =~ /^test\/.*$/i]
  script:
    - yamllint -c /scripts/hog-yaml.yaml YAML/*.yml *.yml .gitlab-ci.yml .github/workflows/*.yml
      Templates/*.yml

nagelfar:
  stage: tag
  image: gitlab-registry.cern.ch/hog/hog-docker:ubuntu
  only:
    refs: [merge_requests]
    variables: [$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(master|develop)$/]
  except:
    variables: [$CI_COMMIT_REF_NAME =~ /^test\/.*$/i]
  script:
    - /scripts/nagelfar133/nagelfar.tcl -Wunusedvar -filter "*Unknown command*" -filter "*Found constant*which is also a variable*" Tcl/*.tcl
      Tcl/*/*.tcl

create_release_note:
  stage: tag
  image: gitlab-registry.cern.ch/hog/hog-docker:tclsh
  only:
    refs: [tags]
    variables: [$CI_COMMIT_TAG =~ /^(v.*)|(Hog.*)$/]
  script:
    - git fetch origin refs/notes/*:refs/notes/*
    - MR=( `git notes show` )
    - ./Other/GetGitlabArtifact.sh $HOG_PUSH_TOKEN $CI_API_V4_URL $CI_PROJECT_ID $MR
      changelog.md changelog > note.md
    - if [[ $CI_COMMIT_TAG =~ ^v.*$ ]]; then ./Other/MakeGitlabRelease.sh $HOG_PUSH_TOKEN
      $CI_API_V4_URL $CI_PROJECT_ID $CI_COMMIT_TAG note.md -b; fi
    - if [[ $CI_COMMIT_TAG =~ ^Hog.*$ ]]; then ./Other/MakeGitlabRelease.sh $HOG_PUSH_TOKEN
      $CI_API_V4_URL $CI_PROJECT_ID $CI_COMMIT_TAG note.md; fi


launch_validation:
  image: gitlab-registry.cern.ch/hog/hog-docker:tclsh
  only: [develop]
  script:
    - 'if [[ $CI_COMMIT_REF_NAME == "develop" ]]; then curl --request POST --header
      "PRIVATE-TOKEN: ${HOG_PUSH_TOKEN}" "$CI_API_V4_URL/projects/40979880/pipeline_schedules/311873/play";
      fi;'
  stage: tag
